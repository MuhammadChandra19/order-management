// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	order "github.com/MuhammadChandra19/order-management/internal/order"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepositoryInterface is a mock of OrderRepositoryInterface interface.
type MockOrderRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryInterfaceMockRecorder
}

// MockOrderRepositoryInterfaceMockRecorder is the mock recorder for MockOrderRepositoryInterface.
type MockOrderRepositoryInterfaceMockRecorder struct {
	mock *MockOrderRepositoryInterface
}

// NewMockOrderRepositoryInterface creates a new mock instance.
func NewMockOrderRepositoryInterface(ctrl *gomock.Controller) *MockOrderRepositoryInterface {
	mock := &MockOrderRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepositoryInterface) EXPECT() *MockOrderRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetOrderList mocks base method.
func (m *MockOrderRepositoryInterface) GetOrderList(search string, startDate, endDate time.Time, sortDirection string, limit, offset int) ([]*order.OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderList", search, startDate, endDate, sortDirection, limit, offset)
	ret0, _ := ret[0].([]*order.OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderList indicates an expected call of GetOrderList.
func (mr *MockOrderRepositoryInterfaceMockRecorder) GetOrderList(search, startDate, endDate, sortDirection, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderList", reflect.TypeOf((*MockOrderRepositoryInterface)(nil).GetOrderList), search, startDate, endDate, sortDirection, limit, offset)
}
